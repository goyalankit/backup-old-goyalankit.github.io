<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/home/ankit]]></title>
  <link href="http://goyalankit.github.io/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/"/>
  <updated>2014-05-24T19:51:14-07:00</updated>
  <id>http://goyalankit.github.io/</id>
  <author>
    <name><![CDATA[Ankit Goyal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[import bash history to zsh history]]></title>
    <link href="http://goyalankit.github.io/blog/2014/05/24/bash-to-zsh-history/"/>
    <updated>2014-05-24T19:35:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/05/24/bash-to-zsh-history</id>
    <content type="html"><![CDATA[<p>Import bash history to zsh history. <a href="https://gist.github.com/goyalankit/a1c88bfc69107f93cda1">Gist Link</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#################################################################</span>
</span><span class='line'><span class="c1"># = This script transfers bash history to zsh history</span>
</span><span class='line'><span class="c1"># = Change bash and zsh history files, if you don&#39;t use defaults</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># = Usage: ruby bash_to_zsh_history.rb</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># = Author: Ankit Goyal</span>
</span><span class='line'><span class="c1">#################################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># change if you don&#39;t use default values</span>
</span><span class='line'><span class="no">BASH_HISTORY_FILE_PATH</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/.bash_history&quot;</span>
</span><span class='line'><span class="no">ZSH_HISTORY_FILE_PATH</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/.zsh_history&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Read the bash history file</span>
</span><span class='line'><span class="n">bash_hist_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">BASH_HISTORY_FILE_PATH</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the list of commands from bash history hile</span>
</span><span class='line'><span class="n">command_list</span> <span class="o">=</span> <span class="n">bash_hist_file</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Open the zsh history file</span>
</span><span class='line'><span class="n">zsh_hist_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">ZSH_HISTORY_FILE_PATH</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get timestamp required for zsh history file format and update the history file</span>
</span><span class='line'><span class="n">time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">command_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="o">|</span>
</span><span class='line'>  <span class="n">time</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">zsh_hist_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;: </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">:0;</span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Close the file</span>
</span><span class='line'><span class="n">zsh_hist_file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[writing an LLVM MachineFunctionPass]]></title>
    <link href="http://goyalankit.github.io/blog/2014/04/01/writing-an-llvm-machinefunctionpass/"/>
    <updated>2014-04-01T00:18:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/04/01/writing-an-llvm-machinefunctionpass</id>
    <content type="html"><![CDATA[<p>Recently I have been working a lot with LLVM. I wanted to write a
<a href="http://llvm.org/docs/WritingAnLLVMPass.html#the-machinefunctionpass-class">MachineFunctionPass</a>, but I couldn&rsquo;t find a good documentation to do that. LLVM has a pretty good <a href="http://llvm.org/docs/WritingAnLLVMPass.html">tutorial</a> on how to write a
general purpose pass. However MachineFunctionPass is a <strong>code
generator</strong>
pass which are not registered and initialized like a normal pass.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[compile and run cpp program from vim]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/27/compile-and-run-cpp-program-from-vim/"/>
    <updated>2014-03-27T22:07:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/27/compile-and-run-cpp-program-from-vim</id>
    <content type="html"><![CDATA[<p>To compile and run cpp program from <code>MVIM</code>(or VIM) directly. Add this to
your ~/.vimrc</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">c</span><span class="p">&gt;</span> :<span class="p">!</span><span class="k">g</span><span class="p">++</span> <span class="p">-</span><span class="k">o</span>  %:<span class="k">r</span>.out % <span class="p">-</span>std<span class="p">=</span><span class="k">c</span><span class="p">++</span><span class="m">11</span><span class="p">&lt;</span>Enter<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">x</span><span class="p">&gt;</span> :<span class="p">!</span>./%:<span class="k">r</span>.out
</span></code></pre></td></tr></table></div></figure>


<p>Note: You can <strong>remove/add</strong> the <code>&lt;Enter&gt;</code> if you prefer to press <code>&lt;Enter&gt;</code> yourself.</p>

<p>Now simply hit<code>Ctrl + c</code> to compile and <code>Ctrl + x</code> to execute.</p>

<p>For a source file with name <code>main.cpp</code>, commands will be expanded to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>g++ -o main.out main.cpp -std<span class="o">=</span>c++11
</span><span class='line'>./main.out
</span></code></pre></td></tr></table></div></figure>


<p>The <code>%:r</code> gets the current filename without the extension whereas <code>%</code>
gets the current filename.</p>

<p>You can very easily extend above approach to compile using <strong>makefile</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learning concept checking the hard way - part 3]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/25/learning-concept-checking-the-hard-way-3/"/>
    <updated>2014-03-25T19:19:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/25/learning-concept-checking-the-hard-way-3</id>
    <content type="html"><![CDATA[<p>In the previous posts <a href="http://goyalankit.com/blog/2014/03/21/learning-concept-checking-the-hard-way-1/">this</a> and <a href="http://goyalankit.com/blog/2014/03/24/learning-concept-checking-the-hard-way-2/">this</a>, I talked about the basics of
concept checking and stuff you need to know.</p>

<p>Finally here&rsquo;s our <code>has_less</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#import &lt;complex&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">unused</span> <span class="o">=</span> <span class="n">decltype</span><span class="p">(</span><span class="n">T</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">())</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">true_type</span> <span class="n">has_less_helper</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">false_type</span> <span class="n">has_less_helper</span><span class="p">(...);</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">constexpr</span> <span class="kt">bool</span> <span class="n">has_less</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="k">using</span> <span class="n">my_type</span> <span class="o">=</span> <span class="n">decltype</span><span class="p">(</span><span class="n">has_less_helper</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">declval</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">my_type</span><span class="o">::</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinarySearchTree</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">static_assert</span><span class="p">(</span><span class="n">has_less</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(),</span> <span class="s">&quot;Assertion failed. No less than operation defined.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BinarySearchTree</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">binarySearchTree</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// compile time error here. since complex&lt;int&gt; doesn&#39;t have a &#39;&lt;&#39; operator</span>
</span><span class='line'>    <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="n">complex</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">compBinarySearchTree</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s dissect the above method and see what&rsquo;s happening.</p>

<p><code>has_helper</code> method has two possible overload options. For the <code>int</code>
datatype both are possible overload candidates but as we saw earlier
compiler prefers the <strong>non-variadi</strong>c option. So it choosses the first
option which has a return type of <code>std::true_type</code>.</p>

<p>However for <code>complex&lt;int&gt;</code>, compiler has only one option since <code>&lt;</code>
doesn&rsquo;t exist for <code>complex</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// we don&#39;t need to define the methods</span>
</span><span class='line'><span class="c1">// Since we are not calling them.</span>
</span><span class='line'><span class="c1">// we are just using the principle of SFINAE that applies to template</span>
</span><span class='line'><span class="c1">// arguments and not to the body</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">unused</span> <span class="o">=</span> <span class="n">decltype</span><span class="p">(</span><span class="n">T</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">())</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">true_type</span> <span class="n">has_less_helper</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//and</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">false_type</span> <span class="n">has_less_helper</span><span class="p">(...);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note:</em> <a href="http://www.cplusplus.com/reference/type_traits/true_type/"><code>true_type</code></a> and <a href="http://www.cplusplus.com/reference/type_traits/true_type/"><code>false_type</code></a> are just structs with values as
<code>true</code> and <code>false</code> resp. Check out <a href="http://www.cplusplus.com/reference/type_traits/integral_constant/">their usage</a></p>

<p>We could directly use <code>has_less_helper</code> to know what Type has a less
than operator defined for it. However it is important to note that the
<code>has_less_helper</code> assumes that type <code>T</code> has a default constructor
defined for it(<code>decltype(T() &lt; T())</code>).</p>

<p>To remove above dependency we could use declvalue(as discussed in
previous post). That is what we are
doing in <code>has_less</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">constexpr</span> <span class="kt">bool</span> <span class="n">has_less</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// using is equivalent to typedef</span>
</span><span class='line'>    <span class="k">using</span> <span class="n">my_type</span> <span class="o">=</span> <span class="n">decltype</span><span class="p">(</span><span class="n">has_less_helper</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">declval</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>    <span class="c1">// note that the return type is either true_type or false_type</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">my_type</span><span class="o">::</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note:</em> the <code>constexpr</code> keyword makes the method evaluate at compile time. So we will have a true or false value from this method at compile time.</p>

<p>Inside our definition of generic <code>BinarySearchTree</code> we put a
<code>static_assert</code>(compile time assert) to check that we have a less that
operator define for the type T.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinarySearchTree</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">static_assert</span><span class="p">(</span><span class="n">has_less</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(),</span> <span class="s">&quot;Assertion failed. No less than operation defined.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BinarySearchTree</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Now when you declare something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">BinarySearchTree</span><span class="o">&lt;</span> <span class="n">complex</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">compBinarySearchTree</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>we get a compile time error.</p>

<p>Awesome! Now you understand the concept of concept checking. Happy
coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learning concept checking the hard way - part 2]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/24/learning-concept-checking-the-hard-way-2/"/>
    <updated>2014-03-24T18:38:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/24/learning-concept-checking-the-hard-way-2</id>
    <content type="html"><![CDATA[<p>In the <a href="http://goyalankit.com/blog/2014/03/21/learning-concept-checking-the-hard-way-1/">previous post</a>, I talked about importance/use case of concept
checking. In this post we&rsquo;ll step by step see how concept checking
works.</p>

<p>Our final goal is to write a <code>has_less</code> method, which for any
given type will return true or false based on whether <code>&lt;</code> is defined for
that type or not at the <strong>compile time</strong></p>

<p>Let&rsquo;s first look at some of the c++ concepts which we&rsquo;ll use in the
process.</p>

<h3>1. decltype</h3>

<p>(since c++11)</p>

<p><code>decltype</code> let&rsquo;s you extract type from any expression. It&rsquo;s available in
C++11</p>

<p>For example, In the example below, decltype can be used to get the type
of variable <code>myType1</code> and used to define another variable with the same
type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//dec.cpp file</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyType</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">MyType</span><span class="p">(){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Mytype: constructor called.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">MyType</span> <span class="n">myType1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">decltype</span><span class="p">(</span><span class="n">myType1</span><span class="p">)</span> <span class="n">myType2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="nl">Mytype:</span> <span class="n">constructor</span> <span class="n">called</span><span class="p">.</span>
</span><span class='line'><span class="nl">Mytype:</span> <span class="n">constructor</span> <span class="n">called</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Takeaway</strong>: we can use <strong>decltype</strong> to get type of a variable.</p>

<h3>2. declval</h3>

<p>(since c++11)</p>

<p><code>declval</code> creates a default constructed type of its argument for use in type checking. It never returns a value.
It is usually used with <code>decltype</code> to determine the type of an
expression. It doesn&rsquo;t
require constructor of the types to exist or match. Line 14 won&rsquo;t
compile because there is no matching constructor.</p>

<p>Note that the compilation error occurs because <code>NonDefault</code> type doesn&rsquo;t
have a &ldquo;default&rdquo; constructor. If you uncomment the line number 6, the compilation error on line 14 will go away since now compiler will find a matching constructor.</p>

<p>Example, taken from <a href="http://naipc.uchicago.edu/2014/ref/cppreference/en/cpp/utility/declval.html">cpp reference</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Default</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">foo</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="mi">1</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">NonDefault</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//    NonDefault(){}</span>
</span><span class='line'>    <span class="n">NonDefault</span><span class="p">(</span><span class="k">const</span> <span class="n">NonDefault</span><span class="o">&amp;</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">foo</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="mi">1</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">decltype</span><span class="p">(</span><span class="n">Default</span><span class="p">().</span><span class="n">foo</span><span class="p">())</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// int n1</span>
</span><span class='line'><span class="c1">//  decltype(NonDefault().foo()) n2 = n1; // will not compile</span>
</span><span class='line'>    <span class="n">decltype</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">declval</span><span class="o">&lt;</span><span class="n">NonDefault</span><span class="o">&gt;</span><span class="p">().</span><span class="n">foo</span><span class="p">())</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">n1</span><span class="p">;</span> <span class="c1">// int n2</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;n2 = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">n2</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. constexpr</h3>

<p>(since c++11)</p>

<p><code>constexpr</code> gives you a constant at the compile time instead of runtime
constant that you get using <code>const</code> keyword.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">constexpr</span> <span class="kt">int</span> <span class="n">CreateConstant</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">arraySize</span> <span class="o">=</span> <span class="n">CreateConstant</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>arraySize</code> will be calculated at the compile time here.</p>

<h3>4. static_assert</h3>

<p>(since c++11)</p>

<p>Performs compile-time assertion checking</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//will give you a compile time assertion failure error. </span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">static_assert</span><span class="p">(</span><span class="mi">1</span><span class="o">==</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;Assertion failed.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. Template specialization</h3>

<p>Templates in c++ are turing complete and you can do lot of cool stuff
with them. Some trivia about templates:</p>

<ul>
<li><p><strong>Templates are instantiated at compile time and only if they are used
 somewhere in a program.</strong> However they are checked for syntax.</p>

<p> Consider the example below, where we have a generic template method(<code>hello(T a)</code>) that
 calls a method(<code>iDontExist</code>) that is not defined anywhere. However the code
 compiles successfully since we are not calling that method.</p>

<p> Note the specialization of the template for int type. When compiler
 has more than one functions with the same name, it looks at the type
 and select the best match. In case of <code>hello&lt;int&gt;(2)</code>, it selects the
 specialized template over generic so, it instantiates only the
 specialized template which is both syntactically and semantically correct.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// This is a valid code and will compile just fine</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">foo</span> <span class="n">a</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">T</span><span class="o">::</span><span class="n">iDontExist</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">//iDontExist doesn&#39;t exist.</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Another possible candidate.</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">){</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[]){</span>
</span><span class='line'>    <span class="n">hello</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Substitution failure is not an error (SFINAE)</strong></li>
</ul>


<p>Note in the above program, when <code>hello&lt;int&gt;</code> is called compiler first
tries to match it with the <code>void hello(typename T::foo a)</code>, however <code>int</code> doesn&rsquo;t have a nested type <code>int::foo</code>.
This is called a substitution failure, compiler failed to substitute
typename T for int.</p>

<p>Compiler doesn&rsquo;t throw a compilation error here; it removes this
overload from potential candidate and tries to
find the next possible match. If one or more candidates remain and overload resolution succeeds,
the invocation is well-formed. Check out more about SFINANE on <a href="http://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error">wikipedia</a></p>

<ul>
<li><strong>Given two possible candidates where one is variadic and other is not.
Compiler always chooses the non-variadic method.</strong> For example, In the
example below compiler has two candidates for <code>hello&lt;int&gt;</code>. Compiler
chooses the non-variadic one.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="c1">// Note the variadic(...) arguments</span>
</span><span class='line'><span class="kt">void</span> <span class="n">hello</span><span class="p">(...){</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;variadic method.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Another possible candidate.</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">){</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;non-variadic method.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[]){</span>
</span><span class='line'>    <span class="n">hello</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="n">non</span><span class="o">-</span><span class="n">variadic</span> <span class="n">method</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>That&rsquo;s all we need and in the next post we&rsquo;ll write our <code>has_less</code> method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learning concept checking the hard way - part 1]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/21/learning-concept-checking-the-hard-way-1/"/>
    <updated>2014-03-21T15:27:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/21/learning-concept-checking-the-hard-way-1</id>
    <content type="html"><![CDATA[<p>What is a concept in C++?</p>

<blockquote><p>A concept is a set of requirements (valid expressions, associated types, semantic invariants, complexity guarantees, etc.)
that a type must fulfill to be correctly used as arguments in a call to a generic algorithm</p></blockquote>

<p>For example if you write your own generic implementation for
<code>BinarySearchTree</code>. It should basically work for any type for which <code>&lt;</code>
operator is defined. As long as you have that condition satisfied you
can build a binary search tree for that type. For instance, <code>&lt;</code> is defined for
<code>int</code>, <code>double</code>. However it&rsquo;s not defined for <code>complex</code> numbers. C++ has
no explicit mechanism for representing concepts.</p>

<p>Consider the following possible way
you may write your generic Binary Search Tree.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinarySearchTree</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// dummy method to insert a new node to the tree</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">insert</span><span class="p">(</span><span class="n">T</span> <span class="n">value</span><span class="p">,</span> <span class="n">T</span> <span class="n">parent</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// calling `&lt;` operator. Compilation will fail if it doesn&#39;t exist</span>
</span><span class='line'>        <span class="c1">// for a type.</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">parent</span><span class="p">){</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Less than operator exists&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">//insert to the left of binary tree.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[]){</span>
</span><span class='line'>    <span class="c1">// instantiating template with int</span>
</span><span class='line'>    <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">bint</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bint</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// instantiating template with double</span>
</span><span class='line'>    <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">bdouble</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bdouble</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mf">1.23</span><span class="p">,</span><span class="mf">3.13</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">g</span><span class="o">++</span> <span class="n">b</span><span class="p">.</span><span class="n">cpp</span> <span class="o">-</span><span class="n">o</span> <span class="n">btree</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">btree</span>
</span><span class='line'><span class="n">Less</span> <span class="n">than</span> <span class="k">operator</span> <span class="n">exists</span>
</span><span class='line'><span class="n">Less</span> <span class="n">than</span> <span class="k">operator</span> <span class="n">exists</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome, so it works for both doube and int, since <code>&lt;</code> is defined for
them. What happens if you try it with complex numbers? let&rsquo;s see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//include the complex lib</span>
</span><span class='line'><span class="cp">#include &lt;complex&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In main function</span>
</span><span class='line'><span class="c1">// instantiating template with complex</span>
</span><span class='line'><span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">complex</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">bcomplex</span><span class="p">;</span>
</span><span class='line'><span class="n">bcomplex</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">complex</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">complex</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you try to run your <code>BinarySearchTree</code> implementation for <code>complex</code>
numbers you will get a compile time error. So the question is how do you
check if a class has a certain method defined or not. Above Example is a
trivial example to show you the use case, the error could be buried deep
into your code and may not represent the actual reason for
failure. Boost documentation gives a <a href="http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm"> good example </a>.</p>

<p>In short it would be good to have a <code>has_less</code> method for a generic type
that determines if the given type has a <code>&lt;</code> method defined or not. Using
this method you can give your user a more meaningful error.</p>

<p>Note that you can use concept checking provided by boost library. You&rsquo;d
need to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;boost/concept_check.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//inside class</span>
</span><span class='line'><span class="n">BOOST_CLASS_REQUIRE</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">boost</span><span class="p">,</span> <span class="n">LessThanComparableConcept</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more info: visit <a href="http://www.boost.org/doc/libs/1_55_0/libs/concept_check/using_concept_check.htm">http://www.boost.org/doc/libs/1_55_0/libs/concept_check/using_concept_check.htm</a></p>

<p>In the <a href="http://goyalankit.com/blog/2014/03/24/learning-concept-checking-the-hard-way-2/">next post</a>, we&rsquo;ll implement our own short version of concept
checking. It involves some really cool template tricks and C++ trivia.</p>

<p>Feel free to comment and give suggestions.</p>

<p>References:</p>

<ol>
<li><a href="http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm">http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[star in ruby]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/15/the-star-in-ruby/"/>
    <updated>2014-03-15T00:11:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/15/the-star-in-ruby</id>
    <content type="html"><![CDATA[<p>I have seen the Ruby&rsquo;s <code>*</code> operator used at several places in different
ways and often times I get confused the way it is used. Finally I decided to learn more about it and here are few interesting roles of <code>*</code> operator that I found in Ruby.
It can be used to multiply, repeat, copy or as a splat operator.</p>

<hr />

<h3>Multiplication</h3>

<p>This is the most obvious role of <code>*</code>. It&rsquo;s the multiplication operator. <code>2 * 2 = 4</code></p>

<p>Or an instance method of <strong>Fixnum</strong> class to perform multiplication. <code>2.*(2) = 4</code></p>

<!-- more -->


<hr />

<h3>Repetition</h3>

<p>Several classes in Ruby defines <code>*</code> operator as a Repetition method.</p>

<ul>
<li><strong>Array</strong> class defines <strong>*</strong> for two different possible type of parameters.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ary * int -&gt; new_ary
</span><span class='line'>ary * str -&gt; new_str</span></code></pre></td></tr></table></div></figure>


<p>For string type it acts as a <code>join</code> method. Examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">*</span> <span class="mi">3</span> <span class="c1"># =&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">*</span> <span class="s1">&#39;,&#39;</span> <span class="c1"># =&gt; &quot;1,2,3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>String</strong> class defines <strong>*</strong> as a <strong>copy</strong> operator. It returns a new string
containing <strong>n</strong> copies of the string. For example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="s2">&quot;ho! &quot;</span> <span class="o">*</span> <span class="mi">3</span> <span class="c1"># =&gt; &quot;ho! ho! ho! &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <strong><code>String * str</code></strong> is not defined.</p>

<hr />

<h3>Splat</h3>

<p>Another less known use of <code>*</code> is as a <strong>splat</strong> operator. Consider
following example where we want to convert options_array to
options_hash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">options_array</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:first_name</span><span class="p">,</span> <span class="s2">&quot;Ankit&quot;</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="s2">&quot;Goyal&quot;</span><span class="o">]</span>
</span><span class='line'><span class="c1"># to</span>
</span><span class='line'><span class="n">options_hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ankit&quot;</span><span class="p">,</span> <span class="ss">:last_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Goyal&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will see that <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html#method-c-5B-5D"><code>[]</code></a> method in <strong>Hash</strong> class takes [key, value, &hellip;] as an argument and
creates a Hash for you. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&gt;</span> <span class="no">Hash</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="c1"># {1 =&gt; 2, 3 =&gt; 4}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how can we use <code>[]</code> method to get the required hash?  You can see in
documentation that <code>[]</code> doesn&rsquo;t
take array as a parameter or you can try running it. It will return you an empty hash with lot of warnings. So we can&rsquo;t call <code>Hash[options_array]</code> directly.</p>

<ul>
<li>We can use splat <code>*</code> operator to convert our array into arguments. If
you call <code>[]</code> with <code>*options_array</code> as a parameter, you&rsquo;ll get the
required hash back.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">options_hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[*</span><span class="n">options_array</span><span class="o">]</span>
</span><span class='line'><span class="c1"># {:first_name =&gt; &quot;Ankit&quot;, :last_name =&gt; &quot;Goyal&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So splat converts <code>*options_array</code> to an argument list. Let&rsquo;s see some
other interesting uses of splat operator.</p>

<p><strong>Splat</strong> can be used to convert an array to argument list as shown above. You can call methods by dynamically generating arguments with minimal
amount of code. For example, if you have a <strong>string</strong> with &lsquo;,&rsquo; separated
values of arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">do_it</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">arg3</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">arg1</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">arg2</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">arg3</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arguments</span> <span class="o">=</span> <span class="s2">&quot;arg1,arg2,arg3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can call <code>do_it</code> method with <code>arg1</code>, <code>arg2</code> and <code>arg3</code> as arguments
using splat like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">do_it</span><span class="p">(</span><span class="o">*</span><span class="n">arguments</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">))</span>
</span><span class='line'><span class="c1"># =&gt; &quot;arg1 arg2 arg3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can also convert list of arguments back to array using splat. For
example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">*</span><span class="n">argument_array</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">argument_array</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong> that you don&rsquo;t need to use splat for the above code to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">argument_array</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">argument_array</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>is equally valid. But it&rsquo;s good to know that you can do it using splat
also.</p>

<p>However, a case where splat comes in handy is to define multiple
variables. Let&rsquo;s see an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above fact is mostly used in defining methods with optional arguments.
This is one of the most common uses of the splat operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">do_it2</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">*</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">arg1</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">arg2</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">options</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">do_it2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">:cool</span><span class="p">,</span> <span class="s2">&quot;abc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; 1 - 2 - [3, 4, 5, :cool, &quot;abc&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is not necessary to have the splat argument at the end in the
method! For example definition like this is equally valid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">do_it3</span><span class="p">(</span><span class="o">*</span><span class="n">options</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">arg1</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">arg2</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">options</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># You must call the method with 2 or more arguments.</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">do_it3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">hello</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; 2 - hello - [1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>However it&rsquo;s invalid to have more than 1 splat arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># This is not valid</span>
</span><span class='line'><span class="k">def</span> <span class="nf">do_it_invalid</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can also use splat operator to convert Hash into an array of
arrays. For example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">options_hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ankit&quot;</span><span class="p">,</span> <span class="ss">:last_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Goyal&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">options_array_of_array</span> <span class="o">=</span> <span class="o">*</span><span class="n">options_hash</span>
</span><span class='line'><span class="c1"># =&gt; [[:first_name, &quot;Ankit&quot;], [:last_name, &quot;Goyal&quot;]]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can use splat operator to un-nest arrays. For example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[*[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Splat operator can possibly be used in several creative ways. If you
know some other way that splash could be used feel free to suggest it in comments.</p>

<p>References/Further Reading:</p>

<ol>
<li><a href="http://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/">http://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/</a></li>
<li><a href="http://www.jacopretorius.net/2012/01/splat-operator-in-ruby.html">http://www.jacopretorius.net/2012/01/splat-operator-in-ruby.html</a></li>
<li><a href="http://www.ruby-doc.org/">http://www.ruby-doc.org/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch basics - Analyzers]]></title>
    <link href="http://goyalankit.github.io/blog/2013/07/24/elasticsearch-basics/"/>
    <updated>2013-07-24T14:18:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2013/07/24/elasticsearch-basics</id>
    <content type="html"><![CDATA[<p>Elasticsearch is a powerful open source search engine build over Apache
Lucene. You can do all kind of customized searches on huge amount of
data by creating customized indexes. This post gives an overview of
Analysis module of elasticsearch.</p>

<p>Analyzers basically helps you in analyzing your data.<code>:o</code> You need to analyze data while creating indexes and while searching. You could analyze your analyzers using <a href="http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze.html">Analyze Api</a> provided by elasticsearch.</p>

<p>Creating indexes mainly involves three steps:</p>

<ul>
<li><strong>Pre-processing of raw text</strong> using <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/mapping-charfilter/">char filters </a>. This may be used to strip html tags, or you may define your custom mapping.  (<em>Couldn&rsquo;t find a way to test this using analyse api. Please put it in comments if you know some way to test these through Analyze Api</em>)</li>
</ul>


<p>Example: You could use a <strong>char-filter</strong> of type <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/htmlstrip-charfilter/"><code>html_strip</code></a> to strip out html tags.</p>

<p>A text like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span> Learn Something New Today! which is <span class="nt">&lt;b&gt;</span>always<span class="nt">&lt;/b&gt;</span> fun <span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>would get converted to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Learn Something New Today! which is always fun
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<ul>
<li><strong>Tokenization of the pre-processed text</strong> using tokenizers. Tokenizers breaks the pre-processed text into tokens. There are different kind of tokenizers available and each of them breaks the text into words differently. By default elasticsearch uses <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/standard-tokenizer/">standard tokenizer</a>.</li>
</ul>


<p>standard tokenizer normalizes the data. Note that it removes <code>!</code> from <code>Today!</code></p>

<p>A pre-processed text like this:</p>

<p><code>Learn Something New Today! which is always fun</code></p>

<p>gets broken as</p>

<p><code>Learn</code> <code>Something</code> <code>New</code> <code>Today</code> <code>which</code> <code>is</code> <code>always</code> <code>fun</code></p>

<p>You could check for yourself using Analyze Api mentioned above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET <span class="s1">&#39;localhost:9200/_analyze?tokenizer=standard&#39;</span> -d <span class="s1">&#39;Learn Something New Today! which is always fun&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a class="link1" id="show-hide-link-1">show/hide the output</a></p>

<div class="foldable" id="show-hide-block-1">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;tokens&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;Learn&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;Something&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">19</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;New&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;Today&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">32</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">27</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;which&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">35</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">33</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;is&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">42</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">36</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;always&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span><span class="o">:</span> <span class="mi">46</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span><span class="o">:</span> <span class="mi">43</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;token&quot;</span><span class="o">:</span> <span class="s2">&quot;fun&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<a class="link1">hide</a>
</div>


<ul>
<li>After the tokenization, <strong>token filters</strong> performs further operations on the processed text like converting it to <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/lowercase-tokenfilter.html">lowercase</a> or <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/reverse-tokenfilter/">reversing</a> of tokens.</li>
</ul>


<p>By default <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/standard-tokenfilter/">standard tokenfilter</a> is used which normalizes the tokens. After the application of lowercase tokenfilter.</p>

<p>A processed text like this:</p>

<p><code>Learn</code> <code>Something</code> <code>New</code> <code>Today</code> <code>which</code> <code>is</code> <code>always</code> <code>fun</code></p>

<p>gets broken as</p>

<p><code>learn</code> <code>something</code> <code>new</code> <code>today</code> <code>which</code> <code>is</code> <code>always</code> <code>fun</code></p>

<figure class='code'><figcaption><span>Analyze Api</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET <span class="s1">&#39;localhost:9200/_analyze?tokenizer=standard&amp;filters=lowercase&#39;</span> -d <span class="s1">&#39;Learn Something New Today! which is always fun&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a class="link2" id="show-hide-link-2">show/hide the output</a></p>

<div class="foldable" id="show-hide-block-2">
<figure class='code'><figcaption><span>Analyze Api</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;tokens&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 5,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 1,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 0,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;learn&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 15,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 2,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 6,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;something&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 19,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 3,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 16,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;new&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 25,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 4,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 20,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;today&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 32,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 5,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 27,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;which&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 35,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 6,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 33,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;is&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 42,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 7,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 36,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;always&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 46,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 8,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 43,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;fun&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<a class="link2">hide</a>
</div>


<p>Thus analyzer is composed of char-filters, tokenizers and tokenfilters. Analyzers defines what kind of search you can preform on your data.</p>

<p>You can have multiple indexes on a field and create your own custom char-filters, tokenizers and tokenfilters. You can have different analyzers for different indexes.</p>

<h2>Let&rsquo;s see it in action</h2>

<p>Example below creates an index with <strong>char-filter</strong> as <code>html_strip</code>, <strong>tokenizer</strong> as <code>standard</code> and tokenfilter i.e, <strong>filter</strong> as <code>lowercase</code> and <code>standard</code></p>

<figure class='code'><figcaption><span>Analyze Api</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPUT http://localhost:9200/test -d <span class="s1">&#39;{                                                                                                                   </span>
</span><span class='line'><span class="s1">  &quot;settings&quot;:{</span>
</span><span class='line'><span class="s1">    &quot;analysis&quot;:{</span>
</span><span class='line'><span class="s1">      &quot;analyzer&quot;:{</span>
</span><span class='line'><span class="s1">        &quot;default&quot;:{</span>
</span><span class='line'><span class="s1">          &quot;type&quot;:&quot;custom&quot;,</span>
</span><span class='line'><span class="s1">          &quot;tokenizer&quot;:&quot;standard&quot;,</span>
</span><span class='line'><span class="s1">          &quot;filter&quot;:[ &quot;standard&quot;, &quot;lowercase&quot; ], </span>
</span><span class='line'><span class="s1">          &quot;char_filter&quot; : [&quot;html_strip&quot;]</span>
</span><span class='line'><span class="s1">        }</span>
</span><span class='line'><span class="s1">      }</span>
</span><span class='line'><span class="s1">    }</span>
</span><span class='line'><span class="s1">  }</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can analyze the text using:</p>

<figure class='code'><figcaption><span>Analyze Api</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl <span class="s1">&#39;http://localhost:9200/test/_analyze&#39;</span> -d <span class="s1">&#39;&lt;p&gt; Learn Something New Today! which is &lt;b&gt;always&lt;/b&gt; fun &lt;/p&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a class="link3" id="show-hide-link-3">show/hide the output</a></p>

<div class="foldable" id="show-hide-block-3">
<figure class='code'><figcaption><span>Analyze Api</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;tokens&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 9,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 1,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 4,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;learn&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 19,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 2,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 10,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;something&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 23,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 3,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 20,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;new&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 29,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 4,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 24,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;today&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 36,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 5,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 31,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;which&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 39,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 6,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 37,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;is&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 53,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 7,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 43,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;always&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;end_offset&quot;</span>: 57,
</span><span class='line'>            <span class="s2">&quot;position&quot;</span>: 8,
</span><span class='line'>            <span class="s2">&quot;start_offset&quot;</span>: 54,
</span><span class='line'>            <span class="s2">&quot;token&quot;</span>: <span class="s2">&quot;fun&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;&lt;ALPHANUM&gt;&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<a class="link3">hide</a>
</div>


<p>Above results shows that the while creating index it first stripped off the html tags and broke the text into words. And then converted them to lowercase.</p>

<p>Following the same procedure you can analyze different kind of
analyzers. Explore different kind of tokenizers, tokenfilters at <a href="http://www.elasticsearch.org/guide/reference/index-modules/analysis/">http://www.elasticsearch.org/guide/reference/index-modules/analysis/</a></p>

<p>In future posts I will discuss more about how to make custom analyzers and features of elasticsearch like filters and facets.</p>

<script>
$(document).ready(function(){
  $(".foldable").hide();
  $(".link1").click(function(){
     $("#show-hide-block-1").toggle(700);
  });

  $(".link2").click(function(){
     $("#show-hide-block-2").toggle(700);
  });

  $(".link3").click(function(){
     $("#show-hide-block-3").toggle(700);
  });

}); 
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[modularize_sinatra - modular sinatra app generator]]></title>
    <link href="http://goyalankit.github.io/blog/2013/07/23/modularize-sinatra/"/>
    <updated>2013-07-23T21:41:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2013/07/23/modularize-sinatra</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/sinatra/sinatra"><strong>Sinatra</strong></a> is simple, small and fast.</p>

<blockquote><p>Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort. <strong> &ndash; sinatra readme</strong></p></blockquote>

<p>The only downside is that it doesn&rsquo;t offer you the typical <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">&ldquo;MVC&rdquo;</a> like <a href="http://github.com/rails/rails"><strong>Rails</strong></a>.</p>

<p>Lot of times Rails is an overkill for a simple application and Sinatra seems like a perfect choice. Since using Sinatra, you could write all your code in a single file, and at one time it becomes really hard to manage the code and you may feel the need of porting it to a framework like Rails. However, you don&rsquo;t need all the features that comes with Rails. What you need here is some kind of modularization in your application. For this very purpose I created a gem called <a href="http://github.com/goyalankit/modularize_sinatra">modularize_sinatra</a></p>

<blockquote><p><strong>modularize_sinatra</strong> creates a <em>Rails like</em> MVC structure without the overhead.</p></blockquote>

<p><a href="https://rubygems.org/gems/modularize_sinatra"><code>modularize_sinatra</code></a> is available on rubygems. For installation and usage instructions please visit <a href="http://github.com/goyalankit/modularize_sinatra">http://github.com/goyalankit/modularize_sinatra</a></p>

<!-- more -->


<h3>What does it do?</h3>

<p>It generates the following directory structure, when generated using <code>modularize_sinatra myapp -C user</code></p>

<pre><code>  .
  |-- Gemfile
  |-- Rakefile
  |-- config
  |   `-- environment.rb
  |-- config.ru
  |-- lib
  |   |-- app.rb
  |   |-- controllers
  |   |   `-- user.rb
  |   `-- views
  |       `-- users
  |           `-- index.erb
  |-- myapp.rb
  |-- public
  |-- script
  |-- spec
  |   |-- controllers
  |   |   `-- user_spec.rb
  |   |-- spec_helper.rb
  |   `-- support
  `-- tmp
</code></pre>

<p>It generated some usual ruby files like</p>

<ul>
<li><strong>Gemfile</strong> &ndash;  A format for describing gem dependencies for Ruby programs.</li>
<li><strong>Rakefile</strong> &ndash; Contains task to run specs.</li>
<li><strong>config.ru</strong> &ndash; Rack configuration file.</li>
<li><strong>config/environment.rb</strong> &ndash; Here you could load your configuration files. <em>Hint: Could load configuration given in .yml files</em></li>
<li><strong>lib</strong> contains directories for placing your controllers and views.</li>
<li><strong>myapp.rb</strong> loads all ruby files inside <code>lib</code>, <code>lib/controllers</code> and <code>lib/models</code>.</li>
</ul>


<p>Note the <strong>lib/models</strong> in above point. You could create a directory called <code>models</code> in lib directory to place your models and it will also be loaded.</p>

<ul>
<li><strong>public</strong> &ndash; To serve public assets.</li>
<li><strong>script</strong> &ndash; You could get rid of this directory. This is just a container to put your scripts.</li>
<li><strong>spec</strong> &ndash; Place your specifications inside this. modularize_sinatra integrates rspec for you by default.</li>
</ul>


<p>Please contribute at <a href="http://github.com/goyalankit/modularize_sinatra">http://github.com/goyalankit/modularize_sinatra</a></p>

<p>Comments and suggestions are most welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initial commit]]></title>
    <link href="http://goyalankit.github.io/blog/2013/07/23/initial-commit/"/>
    <updated>2013-07-23T15:23:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2013/07/23/initial-commit</id>
    <content type="html"><![CDATA[<p><img src="http://25.media.tumblr.com/9bf68d40dd695984b5331280dfe2cb99/tumblr_mft9ey6vlg1rzwhuvo1_400.png"></p>

<p>This is my first post. Through this blog, I hope to share technical, non-technical, all kind of stuff that I discover and/or create.</p>
]]></content>
  </entry>
  
</feed>
