<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cpp | /home/ankit]]></title>
  <link href="http://goyalankit.github.io/blog/categories/cpp/atom.xml" rel="self"/>
  <link href="http://goyalankit.github.io/"/>
  <updated>2014-06-22T02:42:26-07:00</updated>
  <id>http://goyalankit.github.io/</id>
  <author>
    <name><![CDATA[Ankit Goyal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[learning concept checking the hard way - part 3]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/25/learning-concept-checking-the-hard-way-3/"/>
    <updated>2014-03-25T19:19:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/25/learning-concept-checking-the-hard-way-3</id>
    <content type="html"><![CDATA[<p>In the previous posts <a href="http://goyalankit.com/blog/2014/03/21/learning-concept-checking-the-hard-way-1/">this</a> and <a href="http://goyalankit.com/blog/2014/03/24/learning-concept-checking-the-hard-way-2/">this</a>, I talked about the basics of
concept checking and stuff you need to know.</p>

<p>Finally here&rsquo;s our <code>has_less</code> method.</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<h1>include <vector></h1>

<h1>import <complex></h1>

<p>using namespace std;</p>

<p>template <typename T, typename unused = decltype(T() < T())>
std::true_type has_less_helper(const T&amp;);</p>

<p>template <typename T>
std::false_type has_less_helper(&hellip;);</p>

<p>template <typename T>
constexpr bool has_less(void){</p>

<pre><code>using my_type = decltype(has_less_helper&lt;T&gt;(std::declval&lt;T&gt;()));
return my_type::value;
</code></pre>

<p>}</p>

<p>template <typename T>
class BinarySearchTree{
public:</p>

<pre><code>static_assert(has_less&lt;T&gt;(), "Assertion failed. No less than operation defined.");
BinarySearchTree() {
}
</code></pre>

<p>};</p>

<p>int main(int argc, const char * argv[])
{</p>

<pre><code>BinarySearchTree&lt;int&gt; binarySearchTree;
// compile time error here. since complex&lt;int&gt; doesn't have a '&lt;' operator
BinarySearchTree&lt;complex&lt;int&gt;&gt; compBinarySearchTree;
return 0;
</code></pre>

<p>}
```</p>

<p>Let&rsquo;s dissect the above method and see what&rsquo;s happening.</p>

<!-- more -->


<p><code>has_helper</code> method has two possible overload options. For the <code>int</code>
datatype both are possible overload candidates but as we saw earlier
compiler prefers the <strong>non-variadi</strong>c option. So it choosses the first
option which has a return type of <code>std::true_type</code>.</p>

<p>However for <code>complex&lt;int&gt;</code>, compiler has only one option since <code>&lt;</code>
doesn&rsquo;t exist for <code>complex</code> type.</p>

<p>```cpp
// we don&rsquo;t need to define the methods
// Since we are not calling them.
// we are just using the principle of SFINAE that applies to template
// arguments and not to the body</p>

<p>template <typename T, typename unused = decltype(T() < T())>
std::true_type has_less_helper(const T&amp;);</p>

<p>//and</p>

<p>template <typename T>
std::false_type has_less_helper(&hellip;);
```</p>

<p><em>Note:</em> <a href="http://www.cplusplus.com/reference/type_traits/true_type/"><code>true_type</code></a> and <a href="http://www.cplusplus.com/reference/type_traits/true_type/"><code>false_type</code></a> are just structs with values as
<code>true</code> and <code>false</code> resp. Check out <a href="http://www.cplusplus.com/reference/type_traits/integral_constant/">their usage</a></p>

<p>We could directly use <code>has_less_helper</code> to know what Type has a less
than operator defined for it. However it is important to note that the
<code>has_less_helper</code> assumes that type <code>T</code> has a default constructor
defined for it(<code>decltype(T() &lt; T())</code>).</p>

<p>To remove above dependency we could use declvalue(as discussed in
previous post). That is what we are
doing in <code>has_less</code> method.</p>

<p>```
template <typename T>
constexpr bool has_less(void){</p>

<pre><code>// using is equivalent to typedef
using my_type = decltype(has_less_helper&lt;T&gt;(std::declval&lt;T&gt;()));
// note that the return type is either true_type or false_type
return my_type::value;
</code></pre>

<p>}
```</p>

<p><em>Note:</em> the <code>constexpr</code> keyword makes the method evaluate at compile time. So we will have a true or false value from this method at compile time.</p>

<p>Inside our definition of generic <code>BinarySearchTree</code> we put a
<code>static_assert</code>(compile time assert) to check that we have a less that
operator define for the type T.</p>

<p>```cpp
template <typename T>
class BinarySearchTree{
public:</p>

<pre><code>static_assert(has_less&lt;T&gt;(), "Assertion failed. No less than operation defined.");
BinarySearchTree() {
}
</code></pre>

<p>};
```</p>

<p>That&rsquo;s it! Now when you declare something like</p>

<p><code>cpp
BinarySearchTree&lt; complex&lt;int&gt; &gt; compBinarySearchTree;
</code>
we get a compile time error.</p>

<p>Awesome! Now you understand the concept of concept checking. Happy
coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learning concept checking the hard way - part 2]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/24/learning-concept-checking-the-hard-way-2/"/>
    <updated>2014-03-24T18:38:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/24/learning-concept-checking-the-hard-way-2</id>
    <content type="html"><![CDATA[<p>In the <a href="http://goyalankit.com/blog/2014/03/21/learning-concept-checking-the-hard-way-1/">previous post</a>, I talked about importance/use case of concept
checking. In this post we&rsquo;ll step by step see how concept checking
works.</p>

<p>Our final goal is to write a <code>has_less</code> method, which for any
given type will return true or false based on whether <code>&lt;</code> is defined for
that type or not at the <strong>compile time</strong></p>

<p>Let&rsquo;s first look at some of the c++ concepts which we&rsquo;ll use in the
process.</p>

<h3>1. decltype</h3>

<p>(since c++11)</p>

<p><code>decltype</code> let&rsquo;s you extract type from any expression. It&rsquo;s available in
C++11</p>

<p>For example, In the example below, decltype can be used to get the type
of variable <code>myType1</code> and used to define another variable with the same
type.</p>

<p>```cpp
//dec.cpp file
class MyType{
public:</p>

<pre><code>MyType(){std::cout &lt;&lt; "Mytype: constructor called." &lt;&lt; std::endl; }
</code></pre>

<p>};</p>

<p>int main(int argc, const char * argv[])
{</p>

<pre><code>MyType myType1;
decltype(myType1) myType2;
return 0;
</code></pre>

<p>}</p>

<blockquote><blockquote><p>./a.out
Mytype: constructor called.
Mytype: constructor called.</p></blockquote></blockquote>

<p>```</p>

<p><strong>Takeaway</strong>: we can use <strong>decltype</strong> to get type of a variable.</p>

<!-- more -->


<h3>2. declval</h3>

<p>(since c++11)</p>

<p><code>declval</code> creates a default constructed type of its argument for use in type checking. It never returns a value.
It is usually used with <code>decltype</code> to determine the type of an
expression. It doesn&rsquo;t
require constructor of the types to exist or match. Line 14 won&rsquo;t
compile because there is no matching constructor.</p>

<p>Note that the compilation error occurs because <code>NonDefault</code> type doesn&rsquo;t
have a &ldquo;default&rdquo; constructor. If you uncomment the line number 6, the compilation error on line 14 will go away since now compiler will find a matching constructor.</p>

<p>Example, taken from <a href="http://naipc.uchicago.edu/2014/ref/cppreference/en/cpp/utility/declval.html">cpp reference</a>
```cpp
struct Default {</p>

<pre><code>int foo() const {return 1;}
</code></pre>

<p>};</p>

<p>struct NonDefault {
//    NonDefault(){}</p>

<pre><code>NonDefault(const NonDefault&amp;) {}
int foo() const {return 1;}
</code></pre>

<p>};</p>

<p>int main()
{</p>

<pre><code>decltype(Default().foo()) n1 = 1; // int n1
</code></pre>

<p>//  decltype(NonDefault().foo()) n2 = n1; // will not compile</p>

<pre><code>decltype(std::declval&lt;NonDefault&gt;().foo()) n2 = n1; // int n2
std::cout &lt;&lt; "n2 = " &lt;&lt; n2 &lt;&lt; '\n';
</code></pre>

<p>}
```</p>

<h3>3. constexpr</h3>

<p>(since c++11)</p>

<p><code>constexpr</code> gives you a constant at the compile time instead of runtime
constant that you get using <code>const</code> keyword.</p>

<p><code>cpp
constexpr int CreateConstant (int a, int b) { return a * b; }
const int arraySize = CreateConstant(2,3);
</code></p>

<p><code>arraySize</code> will be calculated at the compile time here.</p>

<h3>4. static_assert</h3>

<p>(since c++11)</p>

<p>Performs compile-time assertion checking
```cpp
//will give you a compile time assertion failure error.
int main(int argc, const char * argv[])
{</p>

<pre><code>static_assert(1==2, "Assertion failed.");
return 0;
</code></pre>

<p>}
```</p>

<h3>5. Template specialization</h3>

<p>Templates in c++ are turing complete and you can do lot of cool stuff
with them. Some trivia about templates:</p>

<ul>
<li><p><strong>Templates are instantiated at compile time and only if they are used
 somewhere in a program.</strong> However they are checked for syntax.</p>

<p> Consider the example below, where we have a generic template method(<code>hello(T a)</code>) that
 calls a method(<code>iDontExist</code>) that is not defined anywhere. However the code
 compiles successfully since we are not calling that method.</p>

<p> Note the specialization of the template for int type. When compiler
 has more than one functions with the same name, it looks at the type
 and select the best match. In case of <code>hello&lt;int&gt;(2)</code>, it selects the
 specialized template over generic so, it instantiates only the
 specialized template which is both syntactically and semantically correct.</p></li>
</ul>


<p>```cpp</p>

<p>// This is a valid code and will compile just fine
template <typename T>
void hello(typename T::foo a){</p>

<pre><code>int b = T::iDontExist(12); //iDontExist doesn't exist.
std::cout &lt;&lt; a &lt;&lt; std::endl;
</code></pre>

<p>}</p>

<p>// Another possible candidate.
template <typename T>
void hello(T a){</p>

<pre><code>std::cout &lt;&lt; a &lt;&lt; std::endl;
</code></pre>

<p>}</p>

<p>int main(int argc, const char * argv[]){</p>

<pre><code>hello&lt;int&gt;(2);
return 0;
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li><strong>Substitution failure is not an error (SFINAE)</strong></li>
</ul>


<p>Note in the above program, when <code>hello&lt;int&gt;</code> is called compiler first
tries to match it with the <code>void hello(typename T::foo a)</code>, however <code>int</code> doesn&rsquo;t have a nested type <code>int::foo</code>.
This is called a substitution failure, compiler failed to substitute
typename T for int.</p>

<p>Compiler doesn&rsquo;t throw a compilation error here; it removes this
overload from potential candidate and tries to
find the next possible match. If one or more candidates remain and overload resolution succeeds,
the invocation is well-formed. Check out more about SFINANE on <a href="http://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error">wikipedia</a></p>

<ul>
<li><strong>Given two possible candidates where one is variadic and other is not.
Compiler always chooses the non-variadic method.</strong> For example, In the
example below compiler has two candidates for <code>hello&lt;int&gt;</code>. Compiler
chooses the non-variadic one.</li>
</ul>


<p>```cpp
template <typename T>
// Note the variadic(&hellip;) arguments
void hello(&hellip;){</p>

<pre><code>std::cout &lt;&lt; "variadic method." &lt;&lt; std::endl;
</code></pre>

<p>}
// Another possible candidate.
template <typename T>
void hello(T a){</p>

<pre><code>std::cout &lt;&lt; "non-variadic method." &lt;&lt; std::endl;
</code></pre>

<p>}
int main(int argc, const char * argv[]){</p>

<pre><code>hello&lt;int&gt;(2);
return 0;
</code></pre>

<p>}</p>

<blockquote><blockquote><p>./a.out
non-variadic method.
```</p></blockquote></blockquote>

<hr />

<p>That&rsquo;s all we need and in the next post we&rsquo;ll write our <code>has_less</code> method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[learning concept checking the hard way - part 1]]></title>
    <link href="http://goyalankit.github.io/blog/2014/03/21/learning-concept-checking-the-hard-way-1/"/>
    <updated>2014-03-21T15:27:00-07:00</updated>
    <id>http://goyalankit.github.io/blog/2014/03/21/learning-concept-checking-the-hard-way-1</id>
    <content type="html"><![CDATA[<p>What is a concept in C++?</p>

<blockquote><p>A concept is a set of requirements (valid expressions, associated types, semantic invariants, complexity guarantees, etc.)
that a type must fulfill to be correctly used as arguments in a call to a generic algorithm</p></blockquote>

<p>For example if you write your own generic implementation for
<code>BinarySearchTree</code>. It should basically work for any type for which <code>&lt;</code>
operator is defined. As long as you have that condition satisfied you
can build a binary search tree for that type. For instance, <code>&lt;</code> is defined for
<code>int</code>, <code>double</code>. However it&rsquo;s not defined for <code>complex</code> numbers. C++ has
no explicit mechanism for representing concepts.</p>

<p>Consider the following possible way
you may write your generic Binary Search Tree.</p>

<!-- more -->


<p>```c++</p>

<h1>include<iostream></h1>

<p>template <typename T>
class BinarySearchTree{</p>

<pre><code>public:
// dummy method to insert a new node to the tree
void insert(T value, T parent){
    // calling `&lt;` operator. Compilation will fail if it doesn't exist
    // for a type.
    if(value &lt; parent){
        std::cout &lt;&lt; "Less than operator exists" &lt;&lt; std::endl;
        //insert to the left of binary tree.
    }
}
</code></pre>

<p>};</p>

<p>int main(int argc, char* argv[]){</p>

<pre><code>// instantiating template with int
BinarySearchTree&lt;int&gt; bint;
bint.insert(1,2);
// instantiating template with double
BinarySearchTree&lt;double&gt; bdouble;
bdouble.insert(1.23,3.13);

return 0;
</code></pre>

<p>}</p>

<p>```</p>

<p>```</p>

<blockquote><blockquote><p>g++ b.cpp -o btree
./btree
Less than operator exists
Less than operator exists
```</p></blockquote></blockquote>

<p>Awesome, so it works for both doube and int, since <code>&lt;</code> is defined for
them. What happens if you try it with complex numbers? let&rsquo;s see:</p>

<p>```
//include the complex lib</p>

<h1>include <complex></h1>

<p>// In main function
// instantiating template with complex
BinarySearchTree&lt;std::complex<int> > bcomplex;
bcomplex.insert(std::complex<int>(1,2), std::complex<int>(4,5));</p>

<p>```</p>

<p>If you try to run your <code>BinarySearchTree</code> implementation for <code>complex</code>
numbers you will get a compile time error. So the question is how do you
check if a class has a certain method defined or not. Above Example is a
trivial example to show you the use case, the error could be buried deep
into your code and may not represent the actual reason for
failure. Boost documentation gives a <a href="http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm"> good example </a>.</p>

<p>In short it would be good to have a <code>has_less</code> method for a generic type
that determines if the given type has a <code>&lt;</code> method defined or not. Using
this method you can give your user a more meaningful error.</p>

<p>Note that you can use concept checking provided by boost library. You&rsquo;d
need to do something like this:</p>

<p>```</p>

<h1>include &lt;boost/concept_check.hpp></h1>

<p>//inside class
BOOST_CLASS_REQUIRE(T, boost, LessThanComparableConcept);</p>

<p>```</p>

<p>For more info: visit <a href="http://www.boost.org/doc/libs/1_55_0/libs/concept_check/using_concept_check.htm">http://www.boost.org/doc/libs/1_55_0/libs/concept_check/using_concept_check.htm</a></p>

<p>In the <a href="http://goyalankit.com/blog/2014/03/24/learning-concept-checking-the-hard-way-2/">next post</a>, we&rsquo;ll implement our own short version of concept
checking. It involves some really cool template tricks and C++ trivia.</p>

<p>Feel free to comment and give suggestions.</p>

<p>References:</p>

<ol>
<li><a href="http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm">http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
